/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package librarybasic;

import java.util.*;

public class Library {
    public static void main(String[] args) {

        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };

        StringBuilder myResult = weatherData(weeklyMonthTemperatures);
        System.out.println(myResult);

        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        tally(votes);
    }






    public boolean someLibraryMethod() {
        return true;
    }

    public int[] roll(int rolls){
        int[] diceValues = new int[rolls];
        int localRolls = rolls;

        while (localRolls > 0){
            Random randomRoll = new Random();
            int max = 7;
            int rolledDice = randomRoll.nextInt(1,max);
            localRolls--;
            diceValues[localRolls] = rolledDice;
        }

        return  diceValues;
    }

    public boolean containsDuplicate(int[] testDuplicate){
        boolean duplicateFound = false;
        Integer searchedInt;

        for(int i=0; i<testDuplicate.length;i++) {
            searchedInt = testDuplicate[i];
            for (int j = testDuplicate.length - 1; j > i; j--) {
                Integer innerSearch = testDuplicate[j];
                System.out.println(searchedInt + " , " + innerSearch);
                if (searchedInt.equals(innerSearch)) {
                    duplicateFound = true;
                    return duplicateFound;
                }
            }

        }

        return duplicateFound;
    }

    public float calculateAverage(int[] calcAvgArray){
        int sum = 0;

        for(int i=0;i<calcAvgArray.length; i++){
            sum += calcAvgArray[i];
        }

        return (float) sum/ calcAvgArray.length;
    }
    
    public int[] weeklyMothTemperatures(int[][] temperatures){
        float highestAverage = Float.MAX_VALUE -1;
        int[] myFoundArray = new int[temperatures[0].length];


        for (int[] temperatureArray: temperatures) {
            float average = calculateAverage(temperatureArray);
//            int[] tempArray = new int[innerArray.length];
            if(average < highestAverage) {
                highestAverage = average;
                myFoundArray = temperatureArray;
            }

        }

        return myFoundArray;
    }

    public static StringBuilder weatherData(int[][] temperatures) {

        //generate hashSet for unique weather days
        HashSet<Integer> seenTemperatures = new HashSet<>();

        for (int[] week : temperatures) {

            for (int[] weekday : temperatures) {
                for (int i = 0; i < week.length; i++) {
                    seenTemperatures.add(weekday[i]);
                }
            }
        }

        //Find high low and unseen days
        ArrayList<Integer> mySeenTemps = new ArrayList(seenTemperatures);
        Collections.sort(mySeenTemps);
        int minTemp = mySeenTemps.get(0);
        int maxTemp = mySeenTemps.get(mySeenTemps.size()-1);
        ArrayList<Integer> unfoundTemps = new ArrayList<>();

        // Loop to find unseen temperatures
        for(int i=minTemp; i<maxTemp; i++ ){
            if(!mySeenTemps.contains(i)){
                unfoundTemps.add(i);
            }
        }

        //build the final result
        StringBuilder result = new StringBuilder("High: " + maxTemp + "\n");
        result.append("Low: " + minTemp + "\n");
        for (int i = 0; i < unfoundTemps.size(); i++) {
            result.append("Never saw temperature: "+ unfoundTemps.get(i) +"\n");
        }

        return result;
    }

    public static void tally(List<String> talliesCollected){
        HashMap<String, Integer> countHashMap = new HashMap<>();

        //populate Hashmap from tallies collected
        for (int i = 0; i < talliesCollected.size() ; i++) {
            String tally = talliesCollected.get(i);
            if (countHashMap.get(tally) == null) {
                countHashMap.put(tally,1);
            } else{
                int currentCount = countHashMap.get(tally) +1;
                countHashMap.put(tally , currentCount);
            }
        }
        
        String winner = "Tie" ;
        int highestScore = 0;

        for (String i: countHashMap.keySet()) {
            //System.out.println(i);
            if(countHashMap.get(i) > highestScore){
                highestScore = countHashMap.get(i);
                winner = i;
            }
        }

        System.out.println(winner + " received the most votes!");

    }


}





























// Used

//public class Main {
//    public static void main(String[] args) {
//
//        int[] someArray = {1,2,3,8,4,5,6};
//        int[] someArray2 = {5,10,15,15};
//        //boolean myResult = containsDuplicate(someArray);
//        //System.out.println(myResult);
//        //Integer a = 5;
//        //Integer b = 5;
//        //System.out.println(a.equals(b));
////    float average = calculateAverage(someArray2);
////    System.out.println(average);
//        int[][] weeklyMonthTemperaturesA = {
//                {66, 64, 58, 65, 71, 57, 60},
//                {57, 65, 65, 70, 72, 65, 51},
//                {55, 54, 60, 53, 59, 57, 61},
//                {65, 56, 55, 52, 55, 62, 57}
//        };
//
//
//
//        int[] twoDArray = weeklyMothTemperatures(weeklyMonthTemperaturesA);
//        for(int i =0; i<twoDArray.length;i++){
//            System.out.println(twoDArray[i]);
//        }
//
//
//
//    }
//    public static boolean containsDuplicate(int[] testDuplicate){
//        boolean duplicateFound = false;
//        Integer searchedInt;
//
//        for(int i=0; i<testDuplicate.length;i++){
//            searchedInt = testDuplicate[i];
//            for(int j= testDuplicate.length-1; j>i; j--){
//                Integer innerSearch = testDuplicate[j];
//                System.out.println(searchedInt+ " , "+ innerSearch);
//                if(searchedInt.equals(innerSearch)){
//                    duplicateFound = true;
//                    return duplicateFound;
//                }
//            }
//        }
//
//        return duplicateFound;
//    }
//
//    public static float calculateAverage(int[] calcAvgArray){
//        int sum = 0;
//
//        for(int i=0;i<calcAvgArray.length; i++){
//            sum += calcAvgArray[i];
//        }
//
//        return (float) sum/calcAvgArray.length;
//    }
//
//    //public static float weeklyMothTemperatures(int[][] temperatures){
//    //    float highestAverage = 0;
//    //    for (int[] innerArray: temperatures) {
//    //        float average = calculateAverage(innerArray);
//    //        if(average > highestAverage){
//    //            highestAverage = average;
//    //        }
//    //    }
//
//    //  return highestAverage;
//    //}
//    public static int[] weeklyMothTemperatures(int[][] temperatures){
//        float highestAverage = Float.MAX_VALUE -1;
//        int[] myFoundArray = new int[temperatures[0].length];
//
//
//        for (int[] temperatureArray: temperatures) {
//            float average = calculateAverage(temperatureArray);
////            int[] tempArray = new int[innerArray.length];
//            if(average < highestAverage) {
//                highestAverage = average;
//                myFoundArray = temperatureArray;
//            }
//
//        }
//
//        return myFoundArray;
//    }
//}