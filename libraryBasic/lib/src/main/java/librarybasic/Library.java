/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package librarybasic;

import java.util.Random;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public int[] roll(int rolls){
        int[] diceValues = new int[rolls];
        int localRolls = rolls;

        while (localRolls > 0){
            Random randomRoll = new Random();
            int max = 7;
            int rolledDice = randomRoll.nextInt(1,max);
            localRolls--;
            diceValues[localRolls] = rolledDice;
        }

        return  diceValues;
    }

    public boolean containsDuplicate(int[] testDuplicate){
        boolean duplicateFound = false;
        Integer searchedInt;

        for(int i=0; i<testDuplicate.length;i++) {
            searchedInt = testDuplicate[i];
            for (int j = testDuplicate.length - 1; j > i; j--) {
                Integer innerSearch = testDuplicate[j];
                System.out.println(searchedInt + " , " + innerSearch);
                if (searchedInt.equals(innerSearch)) {
                    duplicateFound = true;
                    return duplicateFound;
                }
            }

        }

        return duplicateFound;
    }

    public float calculateAverage(int[] calcAvgArray){
        int sum = 0;

        for(int i=0;i<calcAvgArray.length; i++){
            sum += calcAvgArray[i];
        }

        return (float) sum/ calcAvgArray.length;
    }
    
    public int[] weeklyMothTemperatures(int[][] temperatures){
        float highestAverage = Float.MAX_VALUE -1;
        int[] myFoundArray = new int[temperatures[0].length];


        for (int[] temperatureArray: temperatures) {
            float average = calculateAverage(temperatureArray);
//            int[] tempArray = new int[innerArray.length];
            if(average < highestAverage) {
                highestAverage = average;
                myFoundArray = temperatureArray;
            }

        }

        return myFoundArray;
    }
}





























// Used

//public class Main {
//    public static void main(String[] args) {
//
//        int[] someArray = {1,2,3,8,4,5,6};
//        int[] someArray2 = {5,10,15,15};
//        //boolean myResult = containsDuplicate(someArray);
//        //System.out.println(myResult);
//        //Integer a = 5;
//        //Integer b = 5;
//        //System.out.println(a.equals(b));
////    float average = calculateAverage(someArray2);
////    System.out.println(average);
//        int[][] weeklyMonthTemperaturesA = {
//                {66, 64, 58, 65, 71, 57, 60},
//                {57, 65, 65, 70, 72, 65, 51},
//                {55, 54, 60, 53, 59, 57, 61},
//                {65, 56, 55, 52, 55, 62, 57}
//        };
//
//
//
//        int[] twoDArray = weeklyMothTemperatures(weeklyMonthTemperaturesA);
//        for(int i =0; i<twoDArray.length;i++){
//            System.out.println(twoDArray[i]);
//        }
//
//
//
//    }
//    public static boolean containsDuplicate(int[] testDuplicate){
//        boolean duplicateFound = false;
//        Integer searchedInt;
//
//        for(int i=0; i<testDuplicate.length;i++){
//            searchedInt = testDuplicate[i];
//            for(int j= testDuplicate.length-1; j>i; j--){
//                Integer innerSearch = testDuplicate[j];
//                System.out.println(searchedInt+ " , "+ innerSearch);
//                if(searchedInt.equals(innerSearch)){
//                    duplicateFound = true;
//                    return duplicateFound;
//                }
//            }
//        }
//
//        return duplicateFound;
//    }
//
//    public static float calculateAverage(int[] calcAvgArray){
//        int sum = 0;
//
//        for(int i=0;i<calcAvgArray.length; i++){
//            sum += calcAvgArray[i];
//        }
//
//        return (float) sum/calcAvgArray.length;
//    }
//
//    //public static float weeklyMothTemperatures(int[][] temperatures){
//    //    float highestAverage = 0;
//    //    for (int[] innerArray: temperatures) {
//    //        float average = calculateAverage(innerArray);
//    //        if(average > highestAverage){
//    //            highestAverage = average;
//    //        }
//    //    }
//
//    //  return highestAverage;
//    //}
//    public static int[] weeklyMothTemperatures(int[][] temperatures){
//        float highestAverage = Float.MAX_VALUE -1;
//        int[] myFoundArray = new int[temperatures[0].length];
//
//
//        for (int[] temperatureArray: temperatures) {
//            float average = calculateAverage(temperatureArray);
////            int[] tempArray = new int[innerArray.length];
//            if(average < highestAverage) {
//                highestAverage = average;
//                myFoundArray = temperatureArray;
//            }
//
//        }
//
//        return myFoundArray;
//    }
//}